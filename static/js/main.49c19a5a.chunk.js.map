{"version":3,"sources":["assets/models/gltf/Flamingo.glb","scripts/characterController.js","scripts/threeScene.js","assets/shaders/sceneShaders.js","App.jsx","index.js"],"names":["CharacterController","scene","this","mixers","initModel","GLTFLoader","load","flamingo","gltf","mesh","children","s","scale","set","position","y","rotation","castShadow","receiveShadow","add","mixer","THREE","clipAction","animations","setDuration","play","push","delta","forEach","update","ThreeScene","containerElement","clock","init","animate","initRenderer","initScene","initCamera","initLights","initGround","initSky","initCameraControls","character","initAxesHelper","initStats","initResizeListener","renderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","shadowMap","enabled","outputEncoding","background","setHSL","fog","camera","hemiLight","color","groundColor","hemiLightHelper","dirLight","multiplyScalar","shadow","mapSize","width","height","left","right","top","bottom","far","bias","dirLightHelper","groundGeo","groundMat","ground","x","Math","PI","uniforms","topColor","value","bottomColor","offset","exponent","copy","skyGeo","skyMat","vertexShader","fragmentShader","side","sky","controls","OrbitControls","maxPolarAngle","minDistance","maxDistance","addEventListener","aspect","updateProjectionMatrix","axesHelper","stats","Stats","dom","getDelta","render","requestAnimationFrame","bind","App","containerRef","useRef","useEffect","current","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.49c19a5a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Flamingo.e65cf943.glb\";","import * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport flamingo from \"../assets/models/gltf/Flamingo.glb\";\n\nclass CharacterController {\n  constructor(scene) {\n    this.scene = scene;\n    this.mixers = [];\n\n    this.initModel();\n  }\n\n  initModel() {\n    const loader = new GLTFLoader();\n\n    loader.load(flamingo, (gltf) => {\n      const mesh = gltf.scene.children[0];\n\n      const s = 0.35;\n      mesh.scale.set(s, s, s);\n      mesh.position.y = 15;\n      mesh.rotation.y = -1;\n\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n\n      this.scene.add(mesh);\n\n      const mixer = new THREE.AnimationMixer(mesh);\n      mixer.clipAction(gltf.animations[0]).setDuration(1).play();\n      this.mixers.push(mixer);\n    });\n  }\n\n  update(delta) {\n    this.mixers.forEach((mixer) => {\n      mixer.update(delta);\n    });\n  }\n}\n\nexport default CharacterController;","import * as THREE from \"three\";\nimport Stats from \"stats.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { fragmentShader, vertexShader } from \"../assets/shaders/sceneShaders\";\n\nimport CharacterController from \"./characterController\";\n\nclass ThreeScene {\n  constructor(containerElement) {\n    this.containerElement = containerElement;\n    this.clock = new THREE.Clock();\n    this.mixers = [];\n\n    this.init();\n    this.animate();\n  }\n\n  init() {\n    this.initRenderer();\n    this.initScene();\n    this.initCamera();\n    this.initLights();\n    this.initGround();\n    this.initSky();\n    this.initCameraControls();\n    this.character = new CharacterController(this.scene);\n\n    this.initAxesHelper();\n    this.initStats();\n    this.initResizeListener();\n  }\n\n  initRenderer() {\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    // Hacky way to increase resolution?\n    this.renderer.setPixelRatio(2 * window.devicePixelRatio);\n    // this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.containerElement.appendChild(this.renderer.domElement);\n    this.renderer.shadowMap.enabled = true;\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n  }\n\n  initScene() {\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color().setHSL(0.1, 0, 1);\n    this.scene.fog = new THREE.Fog(this.scene.background, 1, 5000);\n  }\n\n  initCamera() {\n    this.camera = new THREE.PerspectiveCamera(\n      120,\n      window.innerWidth / window.innerHeight,\n      1,\n      10000\n    );\n    this.camera.position.set(0, 0, 250);\n  }\n\n  initLights() {\n    this.hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.6);\n    this.hemiLight.color.setHSL(0.6, 1, 0.6);\n    this.hemiLight.groundColor.setHSL(0.095, 1, 0.75);\n    this.hemiLight.position.set(0, 50, 0);\n    this.scene.add(this.hemiLight);\n\n    this.hemiLightHelper = new THREE.HemisphereLightHelper(this.hemiLight, 10);\n    this.scene.add(this.hemiLightHelper);\n\n    this.dirLight = new THREE.DirectionalLight(0xffffff, 1);\n    this.dirLight.color.setHSL(0.1, 1, 0.95);\n    this.dirLight.position.set(-1, 1.75, 0);\n    this.dirLight.position.multiplyScalar(30);\n    this.scene.add(this.dirLight);\n\n    this.dirLight.castShadow = true;\n\n    this.dirLight.shadow.mapSize.width = 2048;\n    this.dirLight.shadow.mapSize.height = 2048;\n\n    const d = 50;\n\n    this.dirLight.shadow.camera.left = -d;\n    this.dirLight.shadow.camera.right = d;\n    this.dirLight.shadow.camera.top = d;\n    this.dirLight.shadow.camera.bottom = -d;\n\n    this.dirLight.shadow.camera.far = 3500;\n    this.dirLight.shadow.bias = -0.0001;\n\n    this.dirLightHelper = new THREE.DirectionalLightHelper(this.dirLight, 10);\n    this.scene.add(this.dirLightHelper);\n  }\n\n  initGround() {\n    const groundGeo = new THREE.PlaneGeometry(10000, 10000);\n    const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\n    groundMat.color.setHSL(0.095, 1, 0.75);\n\n    const ground = new THREE.Mesh(groundGeo, groundMat);\n    ground.position.y = -33;\n    ground.rotation.x = -Math.PI / 2;\n    ground.receiveShadow = true;\n    this.scene.add(ground);\n  }\n\n  initSky() {\n    const skydomeVertexShader = vertexShader;\n    const skydomeFragmentShader = fragmentShader;\n    const uniforms = {\n      topColor: { value: new THREE.Color(0x0077ff) },\n      bottomColor: { value: new THREE.Color(0xffffff) },\n      offset: { value: 33 },\n      exponent: { value: 0.6 },\n    };\n\n    // TODO: These could be refactored\n    uniforms[\"topColor\"].value.copy(this.hemiLight.color);\n\n    this.scene.fog.color.copy(uniforms[\"bottomColor\"].value);\n\n    const skyGeo = new THREE.SphereGeometry(4000, 32, 15);\n    const skyMat = new THREE.ShaderMaterial({\n      uniforms,\n      vertexShader: skydomeVertexShader,\n      fragmentShader: skydomeFragmentShader,\n      side: THREE.BackSide,\n    });\n\n    const sky = new THREE.Mesh(skyGeo, skyMat);\n    this.scene.add(sky);\n  }\n\n  initCameraControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.maxPolarAngle = Math.PI * 0.5;\n    this.controls.minDistance = 0;\n    this.controls.maxDistance = 5000;\n  }\n\n  initResizeListener() {\n    window.addEventListener(\"resize\", () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n\n  initAxesHelper() {\n    this.axesHelper = new THREE.AxesHelper(50);\n    this.scene.add(this.axesHelper);\n  }\n\n  initStats() {\n    this.stats = new Stats();\n    this.containerElement.appendChild(this.stats.dom);\n  }\n\n  render() {\n    const delta = this.clock.getDelta();\n\n    // this.dirLight.position.x += 0.1;\n    // this.dirLightHelper.update();\n    this.character.update(delta);\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n    this.stats.update();\n  }\n}\n\nexport default ThreeScene;\n","export const fragmentShader = `\n\tuniform vec3 topColor;\n\tuniform vec3 bottomColor;\n\tuniform float offset;\n\tuniform float exponent;\n\n\tvarying vec3 vWorldPosition;\n\n\tvoid main() {\n\n\t\tfloat h = normalize( vWorldPosition + offset ).y;\n\t\tgl_FragColor = vec4( mix( bottomColor, topColor, max( pow( max( h , 0.0), exponent ), 0.0 ) ), 1.0 );\n\n\t}\n`;\n\nexport const vertexShader = `\n\tvarying vec3 vWorldPosition;\n\n\tvoid main() {\n\n\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\tvWorldPosition = worldPosition.xyz;\n\n\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t}\n`;\n","import React, { useEffect, useRef } from \"react\";\nimport ThreeScene from \"./scripts/threeScene\";\n\nconst App = () => {\n  const containerRef = useRef();\n\n  useEffect(() => {\n    const threeScene = new ThreeScene(containerRef.current);\n  }, []);\n\n  return <section ref={containerRef}></section>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}