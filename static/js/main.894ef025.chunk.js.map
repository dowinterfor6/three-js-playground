{"version":3,"sources":["assets/textures/waternormals.jpg","assets/models/gltf/Flamingo.glb","scripts/characterController.js","scripts/threeScene.js","App.jsx","index.js"],"names":["CharacterController","scene","this","mixers","initModel","GLTFLoader","load","flamingo","gltf","mesh","children","s","scale","set","position","y","rotation","castShadow","receiveShadow","add","mixer","THREE","clipAction","animations","setDuration","play","push","delta","forEach","update","ThreeScene","containerElement","clock","init","animate","initRenderer","initScene","initCamera","initLights","initGround","initSky","initSun","updateSun","initCameraControls","character","initGui","initAxesHelper","initStats","initResizeListener","renderer","antialias","setPixelRatio","window","devicePixelRatio","setSize","innerWidth","innerHeight","appendChild","domElement","shadowMap","enabled","toneMapping","toneMappingExposure","background","setHSL","camera","lookAt","hemiLight","color","groundColor","hemiLightHelper","dirLight","multiplyScalar","shadow","mapSize","width","height","d","left","right","top","bottom","far","bias","dirLightHelper","groundGeo","groundMat","ground","x","Math","PI","sky","Sky","setScalar","skyUniforms","material","uniforms","value","sunPos","sunParameters","turbidity","rayleigh","mieCoefficient","mieDirectionalG","inclination","azimuth","exposure","sunPmremGenerator","theta","phi","cos","sin","z","copy","waterGeometry","water","Water","textureWidth","textureHeight","waterNormals","texture","wrapS","wrapT","alpha","sunDirection","sunColor","waterColor","distortionScale","fog","undefined","controls","OrbitControls","maxPolarAngle","minDistance","maxDistance","addEventListener","aspect","updateProjectionMatrix","axesHelper","stats","Stats","dom","gui","GUI","folderSky","addFolder","onChange","bind","open","getDelta","render","requestAnimationFrame","App","containerRef","useRef","useEffect","current","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.894ef025.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/waternormals.537ec85b.jpg\";","export default __webpack_public_path__ + \"static/media/Flamingo.e65cf943.glb\";","import * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport flamingo from \"../assets/models/gltf/Flamingo.glb\";\n\nclass CharacterController {\n  constructor(scene) {\n    this.scene = scene;\n    this.mixers = [];\n\n    this.initModel();\n  }\n\n  initModel() {\n    const loader = new GLTFLoader();\n\n    loader.load(flamingo, (gltf) => {\n      const mesh = gltf.scene.children[0];\n\n      const s = 0.35;\n      mesh.scale.set(s, s, s);\n      mesh.position.y = 50;\n      mesh.rotation.y = -1;\n\n      mesh.castShadow = true;\n      mesh.receiveShadow = true;\n\n      this.scene.add(mesh);\n\n      const mixer = new THREE.AnimationMixer(mesh);\n      mixer.clipAction(gltf.animations[0]).setDuration(1).play();\n      this.mixers.push(mixer);\n    });\n  }\n\n  update(delta) {\n    this.mixers.forEach((mixer) => {\n      mixer.update(delta);\n    });\n  }\n}\n\nexport default CharacterController;\n","import * as THREE from \"three\";\nimport Stats from \"stats.js\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { fragmentShader, vertexShader } from \"../assets/shaders/sceneShaders\";\nimport { GUI } from \"three/examples/jsm/libs/dat.gui.module\";\nimport { Water } from \"three/examples/jsm/objects/Water\";\nimport { Sky } from \"three/examples/jsm/objects/Sky\";\nimport waterNormals from \"../assets/textures/waternormals.jpg\";\n\nimport CharacterController from \"./characterController\";\nimport { Vector3 } from \"three\";\n\nclass ThreeScene {\n  constructor(containerElement) {\n    this.containerElement = containerElement;\n    this.clock = new THREE.Clock();\n    this.mixers = [];\n\n    this.init();\n    this.animate();\n  }\n\n  init() {\n    this.initRenderer();\n    this.initScene();\n    this.initCamera();\n\n    this.initLights();\n    this.initGround();\n    this.initSky();\n    // this.initWater();\n    this.initSun();\n    this.updateSun();\n\n    this.initCameraControls();\n    this.character = new CharacterController(this.scene);\n\n    this.initGui();\n    this.initAxesHelper();\n    this.initStats();\n    this.initResizeListener();\n  }\n\n  initRenderer() {\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    // Hacky way to increase resolution?\n    this.renderer.setPixelRatio(2 * window.devicePixelRatio);\n    // this.renderer.setPixelRatio(window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n    this.containerElement.appendChild(this.renderer.domElement);\n    this.renderer.shadowMap.enabled = true;\n    // LinearEncoding needed for water\n    // this.renderer.outputEncoding = THREE.sRGBEncoding;\n    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    this.renderer.toneMappingExposure = 0.5;\n  }\n\n  initScene() {\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color().setHSL(0.1, 0, 1);\n    // this.scene.fog = new THREE.Fog(this.scene.background, 1, 5000);\n  }\n\n  initCamera() {\n    this.camera = new THREE.PerspectiveCamera(\n      120,\n      window.innerWidth / window.innerHeight,\n      1,\n      20000\n    );\n    this.camera.position.set(0, 50, 100);\n    // TODO: preferably look at the character position\n    this.camera.lookAt(0, 50, 0);\n  }\n\n  initLights() {\n    // TODO: This color needs to match sky color\n    this.hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 0.3);\n    this.hemiLight.color.setHSL(0.6, 1, 0.6);\n    this.hemiLight.groundColor.setHSL(0.095, 1, 0.75);\n    this.hemiLight.position.set(0, 100, 0);\n    this.scene.add(this.hemiLight);\n\n    this.hemiLightHelper = new THREE.HemisphereLightHelper(this.hemiLight, 10);\n    this.scene.add(this.hemiLightHelper);\n\n    // TODO: This direction needs to match sun pos\n    this.dirLight = new THREE.DirectionalLight(0xffffff, 1);\n    this.dirLight.color.setHSL(0.1, 1, 0.95);\n    this.dirLight.position.set(-1, 1.75, 0);\n    this.dirLight.position.multiplyScalar(30);\n    this.scene.add(this.dirLight);\n\n    this.dirLight.castShadow = true;\n\n    this.dirLight.shadow.mapSize.width = 2048;\n    this.dirLight.shadow.mapSize.height = 2048;\n\n    const d = 100;\n\n    this.dirLight.shadow.camera.left = -d;\n    this.dirLight.shadow.camera.right = d;\n    this.dirLight.shadow.camera.top = d;\n    this.dirLight.shadow.camera.bottom = -d;\n\n    this.dirLight.shadow.camera.far = 3500;\n    this.dirLight.shadow.bias = -0.0001;\n\n    this.dirLightHelper = new THREE.DirectionalLightHelper(this.dirLight, 10);\n    this.scene.add(this.dirLightHelper);\n  }\n\n  initGround() {\n    const groundGeo = new THREE.PlaneGeometry(10000, 10000);\n    const groundMat = new THREE.MeshLambertMaterial({ color: 0xffffff });\n    groundMat.color.setHSL(0.095, 1, 0.75);\n\n    const ground = new THREE.Mesh(groundGeo, groundMat);\n    ground.position.y = 0;\n    ground.rotation.x = -Math.PI / 2;\n    ground.receiveShadow = true;\n    this.scene.add(ground);\n  }\n\n  initSky() {\n    // const skydomeVertexShader = vertexShader;\n    // const skydomeFragmentShader = fragmentShader;\n    // const uniforms = {\n    //   topColor: { value: new THREE.Color(0x0077ff) },\n    //   bottomColor: { value: new THREE.Color(0xffffff) },\n    //   offset: { value: 33 },\n    //   exponent: { value: 0.6 },\n    // };\n\n    // // TODO: These could be refactored\n    // uniforms[\"topColor\"].value.copy(this.hemiLight.color);\n\n    // this.scene.fog.color.copy(uniforms[\"bottomColor\"].value);\n\n    // const skyGeo = new THREE.SphereGeometry(4000, 32, 15);\n    // const skyMat = new THREE.ShaderMaterial({\n    //   uniforms,\n    //   vertexShader: skydomeVertexShader,\n    //   fragmentShader: skydomeFragmentShader,\n    //   side: THREE.BackSide,\n    // });\n\n    // const sky = new THREE.Mesh(skyGeo, skyMat);\n\n    this.sky = new Sky();\n    this.sky.scale.setScalar(45000);\n    this.scene.add(this.sky);\n\n    this.skyUniforms = this.sky.material.uniforms;\n\n    this.skyUniforms[\"turbidity\"].value = 10;\n    this.skyUniforms[\"rayleigh\"].value = 2;\n    this.skyUniforms[\"mieCoefficient\"].value = 0.005;\n    this.skyUniforms[\"mieDirectionalG\"].value = 0.8;\n  }\n\n  initSun() {\n    this.sunPos = new THREE.Vector3();\n\n    // this.sunParameters = {\n    //   inclination: 0.49,\n    //   azimuth: 0.205,\n    // };\n\n    /*\n      inclination: 0,\n      azimuth: 0\n    */\n\n    this.sunParameters = {\n      turbidity: 10,\n      rayleigh: 3,\n      mieCoefficient: 0.005,\n      mieDirectionalG: 0.7,\n      inclination: 0,\n      azimuth: 0,\n      exposure: this.renderer.toneMappingExposure,\n    };\n\n    this.sunPmremGenerator = new THREE.PMREMGenerator(this.renderer);\n  }\n\n  updateSun() {\n    this.skyUniforms[\"turbidity\"].value = this.sunParameters.turbidity;\n    this.skyUniforms[\"rayleigh\"].value = this.sunParameters.rayleigh;\n    this.skyUniforms[\n      \"mieCoefficient\"\n    ].value = this.sunParameters.mieCoefficient;\n    this.skyUniforms[\n      \"mieDirectionalG\"\n    ].value = this.sunParameters.mieDirectionalG;\n\n    const theta = Math.PI * (this.sunParameters.inclination - 0.5);\n    const phi = 2 * Math.PI * (this.sunParameters.azimuth - 0.5);\n\n    this.sunPos.x = Math.cos(phi);\n    this.sunPos.y = Math.sin(phi) * Math.sin(theta);\n    this.sunPos.z = Math.sin(phi) * Math.cos(theta);\n\n    const { x, y, z } = this.sunPos;\n    // console.log(`x: ${x.toFixed(2)}, y: ${y.toFixed(2)}, z: ${z.toFixed(2)}`);\n    /*\n      x goes from -1 to 0 to 1 from sunrise to sunset\n      y goes from 0 to 1 to 0\n      so basically a normal sphere\n    */\n\n    // this.sky.material.uniforms[\"sunPosition\"].value.copy(this.sunPos);\n    this.skyUniforms[\"sunPosition\"].value.copy(this.sunPos);\n    // What exactly is this doing\n    // this.water.material.uniforms[\"sunDirection\"].value\n    //   .copy(this.sunPos)\n    //   .normalize();\n\n    this.renderer.toneMappingExposure = this.sunParameters.exposure;\n\n    // this.scene.environment = this.sunPmremGenerator.fromScene(this.sky).texture;\n    this.dirLight.position.x = x;\n    this.dirLight.position.y = y;\n    this.dirLight.position.z = z;\n    this.dirLight.position.multiplyScalar(500);\n    this.dirLight.lookAt(0, 0, 0);\n  }\n\n  initWater() {\n    const waterGeometry = new THREE.PlaneGeometry(45000, 45000);\n    this.water = new Water(waterGeometry, {\n      textureWidth: 512,\n      textureHeight: 512,\n      waterNormals: new THREE.TextureLoader().load(waterNormals, (texture) => {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      }),\n      alpha: 1.0,\n      sunDirection: new THREE.Vector3(),\n      sunColor: 0xffffff,\n      waterColor: 0x001e0f,\n      distortionScale: 3.7,\n      fog: this.scene.fog !== undefined,\n    });\n    this.water.rotation.x = -Math.PI / 2;\n    this.scene.add(this.water);\n  }\n\n  initCameraControls() {\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    this.controls.maxPolarAngle = Math.PI * 0.495;\n    this.controls.minDistance = 0;\n    this.controls.maxDistance = 5000;\n    this.controls.update();\n  }\n\n  initResizeListener() {\n    window.addEventListener(\"resize\", () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n\n  initAxesHelper() {\n    this.axesHelper = new THREE.AxesHelper(50);\n    this.scene.add(this.axesHelper);\n  }\n\n  initStats() {\n    this.stats = new Stats();\n    this.containerElement.appendChild(this.stats.dom);\n  }\n\n  initGui() {\n    this.gui = new GUI();\n    const folderSky = this.gui.addFolder(\"Sky\");\n    this.gui\n      .add(this.sunParameters, \"turbidity\", 0.0, 20.0, 0.1)\n      .onChange(this.updateSun.bind(this));\n    this.gui\n      .add(this.sunParameters, \"rayleigh\", 0.0, 4, 0.001)\n      .onChange(this.updateSun.bind(this));\n    this.gui\n      .add(this.sunParameters, \"mieCoefficient\", 0.0, 0.1, 0.001)\n      .onChange(this.updateSun.bind(this));\n    this.gui\n      .add(this.sunParameters, \"mieDirectionalG\", 0.0, 1, 0.001)\n      .onChange(this.updateSun.bind(this));\n    // this.gui\n    //   .add(this.sunParameters, \"inclination\", 0, 1, 0.0001)\n    //   .onChange(this.updateSun.bind(this));\n    // this.gui\n    //   .add(this.sunParameters, \"azimuth\", 0, 1, 0.0001)\n    //   .onChange(this.updateSun.bind(this));\n    this.gui\n      .add(this.sunParameters, \"exposure\", 0, 1, 0.0001)\n      .onChange(this.updateSun.bind(this));\n    // folderSky\n    //   .add(this.sunParameters, \"inclination\", 0, 0.5, 0.0001)\n    //   .onChange(this.updateSun.bind(this));\n    // folderSky\n    //   .add(this.sunParameters, \"azimuth\", 0, 1, 0.0001)\n    //   .onChange(this.updateSun.bind(this));\n    folderSky.open();\n\n    // const waterUniforms = this.water.material.uniforms;\n\n    // const folderWater = this.gui.addFolder(\"Water\");\n    // folderWater\n    //   .add(waterUniforms.distortionScale, \"value\", 0, 8, 0.1)\n    //   .name(\"distortionScale\");\n    // folderWater.add(waterUniforms.size, \"value\", 0.1, 10, 0.1).name(\"size\");\n    // folderWater.add(waterUniforms.alpha, \"value\", 0.9, 1, 0.001).name(\"alpha\");\n    // folderWater.open();\n  }\n\n  render() {\n    const delta = this.clock.getDelta();\n    this.sunParameters.azimuth = (this.sunParameters.azimuth + 0.0001) % 1;\n    this.updateSun();\n\n    this.dirLightHelper.update();\n    this.character.update(delta);\n    // this.water.material.uniforms[\"time\"].value += 1.0 / 60.0;\n\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  animate() {\n    requestAnimationFrame(this.animate.bind(this));\n    this.render();\n    this.stats.update();\n  }\n}\n\nexport default ThreeScene;\n","import React, { useEffect, useRef } from \"react\";\nimport ThreeScene from \"./scripts/threeScene\";\n\nconst App = () => {\n  const containerRef = useRef();\n\n  useEffect(() => {\n    const threeScene = new ThreeScene(containerRef.current);\n  }, []);\n\n  return <section ref={containerRef}></section>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}