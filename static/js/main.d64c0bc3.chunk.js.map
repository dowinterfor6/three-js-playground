{"version":3,"sources":["images/corona_bk.png","images/corona_dn.png","images/corona_ft.png","images/corona_lf.png","images/corona_rt.png","images/corona_up.png","scripts/threeScene.js","App.jsx","index.js"],"names":["ThreeScene","containerElement","this","init","initHelpers","addBox","animate","scene","THREE","background","camera","window","innerWidth","innerHeight","position","set","lookAt","renderer","antialias","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","controls","OrbitControls","minDistance","maxDistance","stats","Stats","dom","addEventListener","aspect","updateProjectionMatrix","boxGeometry","edges","line","color","boxMaterial","boxMesh","boxGroup","add","materialArray","ft","bk","up","dn","rt","lf","forEach","img","texture","load","material","map","side","push","skyboxGeo","skybox","axesHelper","render","now","rotation","x","y","requestAnimationFrame","bind","simulate","update","App","containerRef","useRef","useEffect","current","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"qPAAe,MAA0B,sCCA1B,MAA0B,sCCA1B,MAA0B,sCCA1B,MAA0B,sCCA1B,MAA0B,sCCA1B,MAA0B,sCC+G1BA,E,WAnGb,WAAYC,GAAmB,oBAC7BC,KAAKD,iBAAmBA,EAExBC,KAAKC,OACLD,KAAKE,cACLF,KAAKG,SAELH,KAAKI,U,wCAGP,WAAQ,IAAD,OACLJ,KAAKK,MAAQ,IAAIC,IACjBN,KAAKK,MAAME,WAAa,IAAID,IAAY,UAExCN,KAAKQ,OAAS,IAAIF,IAChB,GACAG,OAAOC,WAAaD,OAAOE,YAC3B,GACA,KAEFX,KAAKQ,OAAOI,SAASC,IAAI,GAAI,GAAI,IACjCb,KAAKQ,OAAOM,OAAO,EAAG,EAAG,GAEzBd,KAAKe,SAAW,IAAIT,IAAoB,CAAEU,WAAW,IAErDhB,KAAKe,SAASE,cAAc,EAAIR,OAAOS,kBACvClB,KAAKe,SAASI,QAAQV,OAAOC,WAAYD,OAAOE,aAIhDX,KAAKD,iBAAiBqB,YAAYpB,KAAKe,SAASM,YAEhDrB,KAAKsB,SAAW,IAAIC,IAAcvB,KAAKQ,OAAQR,KAAKe,SAASM,YAE7DrB,KAAKsB,SAASE,YAAc,EAC5BxB,KAAKsB,SAASG,YAAc,IAE5BzB,KAAK0B,MAAQ,IAAIC,IACjB3B,KAAKD,iBAAiBqB,YAAYpB,KAAK0B,MAAME,KAE7CnB,OAAOoB,iBAAiB,UAAU,WAChC,EAAKrB,OAAOsB,OAASrB,OAAOC,WAAaD,OAAOE,YAChD,EAAKH,OAAOuB,yBAEZ,EAAKhB,SAASI,QAAQV,OAAOC,WAAYD,OAAOE,kB,oBAIpD,WACE,IAAMqB,EAAc,IAAI1B,IAAkB,GAAI,GAAI,IAC5C2B,EAAQ,IAAI3B,IAAoB0B,GAChCE,EAAO,IAAI5B,IACf2B,EACA,IAAI3B,IAAwB,CAAE6B,MAAO,KAEjCC,EAAc,IAAI9B,IAAwB,CAAE6B,MAAO,WACnDE,EAAU,IAAI/B,IAAW0B,EAAaI,GAE5CpC,KAAKsC,SAAW,IAAIhC,IACpBN,KAAKsC,SAASC,IAAIL,EAAMG,GACxBrC,KAAKK,MAAMkC,IAAIvC,KAAKsC,UACpB,IAAME,EAAgB,GAET,CAACC,EAAIC,EAAIC,EAAIC,EAAIC,EAAIC,GAC7BC,SAAQ,SAACC,GACZ,IAAMC,GAAU,IAAI3C,KAAsB4C,KAAKF,GACzCG,EAAW,IAAI7C,IAAwB,CAAE8C,IAAKH,IACpDE,EAASE,KAAO/C,IAChBkC,EAAcc,KAAKH,MAGrB,IAAMI,EAAY,IAAIjD,IAAkB,IAAO,IAAO,KAChDkD,EAAS,IAAIlD,IAAWiD,EAAWf,GACzCxC,KAAKK,MAAMkC,IAAIiB,K,yBAGjB,WACExD,KAAKyD,WAAa,IAAInD,IAAiB,IACvCN,KAAKK,MAAMkC,IAAIvC,KAAKyD,c,oBAGtB,WACEzD,KAAKe,SAAS2C,OAAO1D,KAAKK,MAAOL,KAAKQ,U,sBAGxC,SAASmD,GACP3D,KAAKsC,SAASsB,SAASC,GAAK,KAC5B7D,KAAKsC,SAASsB,SAASE,GAAK,O,qBAI9B,SAAQH,GACNI,sBAAsB/D,KAAKI,QAAQ4D,KAAKhE,OACxCA,KAAKiE,SAASN,GACd3D,KAAK0D,SACL1D,KAAK0B,MAAMwC,a,YC9FAC,EAVH,WACV,IAAMC,EAAeC,mBAMrB,OAJAC,qBAAU,WACW,IAAIxE,EAAWsE,EAAaG,WAC9C,IAEI,yBAASC,IAAKJ,KCLvBK,IAASf,OACP,cAAC,IAAMgB,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.d64c0bc3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/corona_bk.97e76adb.png\";","export default __webpack_public_path__ + \"static/media/corona_dn.47349e0d.png\";","export default __webpack_public_path__ + \"static/media/corona_ft.7254c08d.png\";","export default __webpack_public_path__ + \"static/media/corona_lf.b29e8c04.png\";","export default __webpack_public_path__ + \"static/media/corona_rt.287e832e.png\";","export default __webpack_public_path__ + \"static/media/corona_up.782ec698.png\";","import * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport Stats from \"stats.js\";\nimport bk from \"../images/corona_bk.png\";\nimport dn from \"../images/corona_dn.png\";\nimport ft from \"../images/corona_ft.png\";\nimport lf from \"../images/corona_lf.png\";\nimport rt from \"../images/corona_rt.png\";\nimport up from \"../images/corona_up.png\";\n\n// Needs a better name tbh\nclass ThreeScene {\n  constructor(containerElement) {\n    this.containerElement = containerElement;\n\n    this.init();\n    this.initHelpers();\n    this.addBox();\n\n    this.animate();\n  }\n\n  init() {\n    this.scene = new THREE.Scene();\n    this.scene.background = new THREE.Color(0xcce0ff);\n\n    this.camera = new THREE.PerspectiveCamera(\n      75,\n      window.innerWidth / window.innerHeight,\n      0.1,\n      100000 // TODO: Calculate what's needed for skybox\n    );\n    this.camera.position.set(25, 25, 25);\n    this.camera.lookAt(0, 0, 0);\n\n    this.renderer = new THREE.WebGLRenderer({ antialias: true });\n    // Hacky way to increase resolution?\n    this.renderer.setPixelRatio(2 * window.devicePixelRatio);\n    this.renderer.setSize(window.innerWidth, window.innerHeight);\n\n    // this.renderer.shadowMap.enabled = true;\n\n    this.containerElement.appendChild(this.renderer.domElement);\n\n    this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n    // this.controls.maxPolarAngle = Math.PI * 0.5;\n    this.controls.minDistance = 0;\n    this.controls.maxDistance = 1000;\n\n    this.stats = new Stats();\n    this.containerElement.appendChild(this.stats.dom);\n\n    window.addEventListener(\"resize\", () => {\n      this.camera.aspect = window.innerWidth / window.innerHeight;\n      this.camera.updateProjectionMatrix();\n\n      this.renderer.setSize(window.innerWidth, window.innerHeight);\n    });\n  }\n\n  addBox() {\n    const boxGeometry = new THREE.BoxGeometry(10, 10, 10);\n    const edges = new THREE.EdgesGeometry(boxGeometry);\n    const line = new THREE.LineSegments(\n      edges,\n      new THREE.LineBasicMaterial({ color: 0x000000 })\n    );\n    const boxMaterial = new THREE.MeshBasicMaterial({ color: 0xefefef });\n    const boxMesh = new THREE.Mesh(boxGeometry, boxMaterial);\n\n    this.boxGroup = new THREE.Group();\n    this.boxGroup.add(line, boxMesh);\n    this.scene.add(this.boxGroup);\n    const materialArray = [];\n\n    const imgs = [ft, bk, up, dn, rt, lf];\n    imgs.forEach((img) => {\n      const texture = new THREE.TextureLoader().load(img);\n      const material = new THREE.MeshBasicMaterial({ map: texture });\n      material.side = THREE.BackSide;\n      materialArray.push(material);\n    });\n\n    const skyboxGeo = new THREE.BoxGeometry(10000, 10000, 10000);\n    const skybox = new THREE.Mesh(skyboxGeo, materialArray);\n    this.scene.add(skybox);\n  }\n\n  initHelpers() {\n    this.axesHelper = new THREE.AxesHelper(10);\n    this.scene.add(this.axesHelper);\n  }\n\n  render() {\n    this.renderer.render(this.scene, this.camera);\n  }\n\n  simulate(now) {\n    this.boxGroup.rotation.x += 0.005;\n    this.boxGroup.rotation.y += 0.005;\n    // this.boxGroup.rotation.z += 0.005;\n  }\n\n  animate(now) {\n    requestAnimationFrame(this.animate.bind(this));\n    this.simulate(now);\n    this.render();\n    this.stats.update();\n  }\n}\n\nexport default ThreeScene;\n","import React, { useEffect, useRef } from \"react\";\nimport ThreeScene from \"./scripts/threeScene\";\n\nconst App = () => {\n  const containerRef = useRef();\n\n  useEffect(() => {\n    const threeScene = new ThreeScene(containerRef.current);\n  }, []);\n\n  return <section ref={containerRef}></section>;\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}